// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Raspored.Models;

namespace Raspored.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231005072646_add notifications")]
    partial class addnotifications
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Raspored.Models.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("ContractTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Određeno"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neodređeno"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Zamena"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Stažiranje"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Zamrznuto"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Čeka prekid ugovora"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Prekinut radni odnos"
                        });
                });

            modelBuilder.Entity("Raspored.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lični raspored za tekući mesec",
                            Name = "Lični"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Timski raspored za tekući mesec",
                            Name = "Timski"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Pregled svih timskih rasporeda za tekući mesec",
                            Name = "Odeljenski"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Brzi pregled svih tehničara u timu po datumu i smeni",
                            Name = "Smenski"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Kreiranje rasporeda za naredni mesec za sve timove",
                            Name = "Kreiraj"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Lista postojećih timova",
                            Name = "Lista"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Dodavanje novog tima",
                            Name = "Dodaj"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Izmena postojećeg tima",
                            Name = "Izmeni"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Brisanje postojećeg tima",
                            Name = "Obriši"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Spisak svih zaposlenih",
                            Name = "Lista"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Dodaj novog zaposlenog",
                            Name = "Dodaj"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Izmena podataka zaposlenih",
                            Name = "Izmeni"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Obriši zaposlenog - podaci se arhiviraju!",
                            Name = "Obriši"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Pretraga zaposlenih po različitim kriterijumima",
                            Name = "Pretraga"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Podešavanja izgleda i funkcionalnosti aplikacije",
                            Name = "Aplikacija"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Administrativna podešavanja aplikacije i podataka",
                            Name = "Administracija"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Podešavanja organizacije timova",
                            Name = "Timovi"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Prikaz osnovnih podataka korisnika",
                            Name = "Prikaz"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Izmena osnovnih podataka korisnika",
                            Name = "Izmena"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Izmeni podatke u zaglavlju izabranog rasporeda",
                            Name = "Izmeni"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Dodavanje / promena uloge u sklopu tima",
                            Name = "Dodaj/promeni ulogu"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Prebacivanje zaposlenog u drugi tim",
                            Name = "Prebaci u drugi tim"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Dodavanje smene zaposlenom",
                            Name = "Dodaj smenu"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Promena tipa smene",
                            Name = "Promeni smenu"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Brisanje smene sa rasporeda",
                            Name = "Obriši smenu"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Dodela smene za ceo tim",
                            Name = "Dodeli smenu"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Izmena smene za ceo tim",
                            Name = "Izmeni smenu"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Brisanje smene za ceo tim",
                            Name = "Obriši smenu"
                        });
                });

            modelBuilder.Entity("Raspored.Models.FeatureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FeatureTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Raspored"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Timovi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Zaposleni"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Podešavanja"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Profil"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RCZaglavlje"
                        },
                        new
                        {
                            Id = 7,
                            Name = "RCImeClana"
                        },
                        new
                        {
                            Id = 8,
                            Name = "RCSmena"
                        },
                        new
                        {
                            Id = 9,
                            Name = "RCDatumSmene"
                        });
                });

            modelBuilder.Entity("Raspored.Models.Login.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("ReligiousHoliday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("YearOfEmployment")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Raspored.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Unread")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Raspored.Models.NotificationMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("NotificationMappings");
                });

            modelBuilder.Entity("Raspored.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Organizaciona sestra - tehničar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Edukator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medicinska sestra - tehničar"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mikrobiološka sestra - tehničar"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Administrativna sestra - tehničar"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sterilizacijska sestra - tehničar"
                        });
                });

            modelBuilder.Entity("Raspored.Models.RoleFeatureMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleFeatureMappings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeatureId = 1,
                            FeatureTypeId = 1,
                            RoleId = "95df2068-389d-457f-a0e6-eb8b4e1bc906"
                        },
                        new
                        {
                            Id = 2,
                            FeatureId = 2,
                            FeatureTypeId = 1,
                            RoleId = "95df2068-389d-457f-a0e6-eb8b4e1bc906"
                        },
                        new
                        {
                            Id = 3,
                            FeatureId = 3,
                            FeatureTypeId = 1,
                            RoleId = "95df2068-389d-457f-a0e6-eb8b4e1bc906"
                        },
                        new
                        {
                            Id = 4,
                            FeatureId = 4,
                            FeatureTypeId = 1,
                            RoleId = "95df2068-389d-457f-a0e6-eb8b4e1bc906"
                        },
                        new
                        {
                            Id = 5,
                            FeatureId = 1,
                            FeatureTypeId = 1,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 6,
                            FeatureId = 2,
                            FeatureTypeId = 1,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 7,
                            FeatureId = 3,
                            FeatureTypeId = 1,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 8,
                            FeatureId = 4,
                            FeatureTypeId = 1,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 9,
                            FeatureId = 5,
                            FeatureTypeId = 1,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 10,
                            FeatureId = 6,
                            FeatureTypeId = 2,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 11,
                            FeatureId = 7,
                            FeatureTypeId = 2,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 12,
                            FeatureId = 8,
                            FeatureTypeId = 2,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 13,
                            FeatureId = 9,
                            FeatureTypeId = 2,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 14,
                            FeatureId = 10,
                            FeatureTypeId = 3,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 15,
                            FeatureId = 11,
                            FeatureTypeId = 3,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 16,
                            FeatureId = 12,
                            FeatureTypeId = 3,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 17,
                            FeatureId = 13,
                            FeatureTypeId = 3,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 18,
                            FeatureId = 14,
                            FeatureTypeId = 3,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 19,
                            FeatureId = 15,
                            FeatureTypeId = 4,
                            RoleId = "95df2068-389d-457f-a0e6-eb8b4e1bc906"
                        },
                        new
                        {
                            Id = 20,
                            FeatureId = 15,
                            FeatureTypeId = 4,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 21,
                            FeatureId = 16,
                            FeatureTypeId = 4,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 22,
                            FeatureId = 17,
                            FeatureTypeId = 4,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 23,
                            FeatureId = 18,
                            FeatureTypeId = 5,
                            RoleId = "95df2068-389d-457f-a0e6-eb8b4e1bc906"
                        },
                        new
                        {
                            Id = 24,
                            FeatureId = 19,
                            FeatureTypeId = 5,
                            RoleId = "95df2068-389d-457f-a0e6-eb8b4e1bc906"
                        },
                        new
                        {
                            Id = 25,
                            FeatureId = 18,
                            FeatureTypeId = 5,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 26,
                            FeatureId = 19,
                            FeatureTypeId = 5,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 27,
                            FeatureId = 20,
                            FeatureTypeId = 6,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 28,
                            FeatureId = 21,
                            FeatureTypeId = 7,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 29,
                            FeatureId = 22,
                            FeatureTypeId = 7,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 30,
                            FeatureId = 23,
                            FeatureTypeId = 8,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 31,
                            FeatureId = 24,
                            FeatureTypeId = 8,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 32,
                            FeatureId = 25,
                            FeatureTypeId = 8,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 33,
                            FeatureId = 26,
                            FeatureTypeId = 9,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 34,
                            FeatureId = 27,
                            FeatureTypeId = 9,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        },
                        new
                        {
                            Id = 35,
                            FeatureId = 28,
                            FeatureTypeId = 9,
                            RoleId = "b1a25eb0-1475-4ba0-afdf-2e8cf754d01f"
                        });
                });

            modelBuilder.Entity("Raspored.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("ShiftTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TeamMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Raspored.Models.ShiftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("ShiftTypes");
                });

            modelBuilder.Entity("Raspored.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Raspored.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TeamMemberRoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamMemberRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Raspored.Models.TeamMemberRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("TeamMemberRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Raspored.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Raspored.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raspored.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Raspored.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raspored.Models.Login.ApplicationUser", b =>
                {
                    b.HasOne("Raspored.Models.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId");

                    b.HasOne("Raspored.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("ContractType");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Raspored.Models.NotificationMapping", b =>
                {
                    b.HasOne("Raspored.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raspored.Models.Login.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Raspored.Models.Login.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Raspored.Models.RoleFeatureMapping", b =>
                {
                    b.HasOne("Raspored.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raspored.Models.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Feature");

                    b.Navigation("FeatureType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Raspored.Models.Shift", b =>
                {
                    b.HasOne("Raspored.Models.ShiftType", "ShiftType")
                        .WithMany()
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raspored.Models.TeamMember", "TeamMember")
                        .WithMany()
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftType");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("Raspored.Models.TeamMember", b =>
                {
                    b.HasOne("Raspored.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raspored.Models.TeamMemberRole", "TeamMemberRole")
                        .WithMany()
                        .HasForeignKey("TeamMemberRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raspored.Models.Login.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Team");

                    b.Navigation("TeamMemberRole");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
